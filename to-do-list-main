from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QListWidget, QLineEdit
from PyQt5 import uic
import sys
import sqlite3
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import QMessageBox

conn = sqlite3.connect('mylist.database')
c = conn.cursor()
c.execute('CREATE TABLE if not exists to_do_list(list_item text)')
conn.commit()
conn.close()

class toDoApp(QMainWindow):
    def __init__(self):
        super().__init__()

        uic.loadUi("ToDoApp.ui", self)

        self.lineEdit = self.findChild(QLineEdit, "toDoLineEdit")
        self.listWidget = self.findChild(QListWidget, "toDoList")
        self.addButton = self.findChild(QPushButton, "addButton")
        self.deleteButton = self.findChild(QPushButton, "deleteButton")
        self.clearButton = self.findChild(QPushButton, "clearButton")
        self.saveButton = self.findChild(QPushButton, "saveButton")

        self.saveButton.pressed.connect(self.saveList)
        self.addButton.pressed.connect(self.addToList)
        self.deleteButton.pressed.connect(self.deleteItem)
        self.clearButton.pressed.connect(self.clearItem)

        self.getAllItem()

    # Add button events here

    def getAllItem(self):
        conn = sqlite3.connect('mylist.database')
        c = conn.cursor()
        c.execute('SELECT * FROM to_do_list')
        result = c.fetchall()
        conn.commit()
        conn.close()
        for row in result:
            self.listWidget.addItem(row[0])

    def addToList(self):
        conn = sqlite3.connect('mylist.database')
        c = conn.cursor()
        item = self.lineEdit.text()
        if len(item) == 0:
            error_msg = QtWidgets.QMessageBox()
            error_msg.setText("Invalid Item! Try Again!")
            error_msg.setIcon(QtWidgets.QMessageBox.Information)
            error_msg.setWindowTitle("INVALID ITEM")
            error_msg.setWindowIcon(QtGui.QIcon("icon.png"))
            x = error_msg.exec_()
        elif item.isspace():
            error_msg = QtWidgets.QMessageBox()
            error_msg.setText("Invalid Item! Try Again!")
            error_msg.setIcon(QtWidgets.QMessageBox.Warning)
            error_msg.setWindowTitle("INVALID ITEM")
            error_msg.setWindowIcon(QtGui.QIcon("icon.png"))
            x = error_msg.exec_()
        else:
            itemFinal = item.strip()
            self.listWidget.addItem(itemFinal)
            self.lineEdit.setText("")
            c.execute('INSERT INTO to_do_list VALUES (:item)', {'item': itemFinal})
            conn.commit()
            conn.close()

            add_msg = QtWidgets.QMessageBox()
            add_msg.setText(f"{itemFinal}: Item Added")
            add_msg.setIcon(QtWidgets.QMessageBox.Information)
            add_msg.setWindowTitle("ITEM ADDED")
            add_msg.setWindowIcon(QtGui.QIcon("icon.png"))
            x = add_msg.exec_()

    def saveList(self):
        conn = sqlite3.connect('mylist.database')
        c = conn.cursor()
        c.execute('DELETE FROM to_do_list; ', )

        items = []
        for i in range(self.listWidget.count()):
            items.append(self.listWidget.item(i))
        for item in items:
            c.execute('INSERT INTO to_do_list VALUES (:item)', {'item': item.text()})
        conn.commit()
        conn.close()

        save_msg = QtWidgets.QMessageBox()
        save_msg.setText("List Saved")
        save_msg.setIcon(QtWidgets.QMessageBox.Information)
        save_msg.setWindowTitle("LIST SAVED")
        save_msg.setWindowIcon(QtGui.QIcon("icon.png"))
        x = save_msg.exec_()

    def deleteItem(self):
        clicked = self.listWidget.currentRow()
        self.listWidget.takeItem(clicked)

    def clearItem(self):
        self.listWidget.clear()

        clear_msg = QtWidgets.QMessageBox()
        clear_msg.setText("List Cleared")
        clear_msg.setIcon(QtWidgets.QMessageBox.Information)
        clear_msg.setWindowTitle("LIST CLEARED")
        clear_msg.setWindowIcon(QtGui.QIcon("icon.png"))
        x =  clear_msg.exec_()

app = QApplication(sys.argv)
UIWindow = toDoApp()
UIWindow.show()
app.exec_()
